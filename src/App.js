// file: frontend/src/App.js - PHI√äN B·∫¢N HO√ÄN CH·ªàNH V√Ä ·ªîN ƒê·ªäNH NH·∫§T

import React, { useState, useEffect } from 'react';
import { Routes, Route, Link } from 'react-router-dom';
import io from 'socket.io-client';
import './App.css';

// --- COMPONENT TRANG CHAT CH√çNH ---
function ChatPage() {
  const [user, setUser] = useState(null); 
  const [message, setMessage] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [sdkReady, setSdkReady] = useState(false);
  const [socket, setSocket] = useState(null);

  useEffect(() => {
    // K·∫øt n·ªëi ƒë·∫øn Backend tr√™n Render.com
    const newSocket = io('https://piconnect-server.onrender.com');
    setSocket(newSocket);

    // X·ª≠ l√Ω timing c·ªßa Pi SDK
    const initPiSdk = () => {
      if (window.Pi) {
        console.log("Pi SDK ƒë√£ s·∫µn s√†ng!");
        window.Pi.init({ version: "2.0", sandbox: true });
        setSdkReady(true);
      } else {
        console.error("Kh√¥ng t√¨m th·∫•y Pi SDK!");
      }
    };
    window.addEventListener('load', initPiSdk);

    // L·∫Øng nghe tin nh·∫Øn t·ª´ server
    newSocket.on('receiveMessage', (data) => {
      setChatHistory((prev) => [...prev, { ...data, type: 'received' }]);
    });

    // D·ªçn d·∫πp listener khi component b·ªã h·ªßy
    return () => {
      window.removeEventListener('load', initPiSdk);
      newSocket.off('receiveMessage');
      newSocket.disconnect();
    };
  }, []);

  // --- C√ÅC H√ÄM X·ª¨ L√ù S·ª∞ KI·ªÜN ---

  const handleAuthenticate = async () => {
    if (!sdkReady) {
        alert("Vui l√≤ng m·ªü ·ª©ng d·ª•ng n√†y trong Pi Browser v√† t·∫£i l·∫°i trang ƒë·ªÉ ƒëƒÉng nh·∫≠p.");
        return;
    }
    try {
      const scopes = ['username', 'payments'];
      const piUser = await window.Pi.authenticate(scopes, () => {});
      setUser(piUser);
    } catch (err) {
      console.error("X√°c th·ª±c th·∫•t b·∫°i:", err);
    }
  };

  const handleLogout = () => {
    setUser(null);
  };

  const handleTip = async (messageToTip) => {
    if (!sdkReady) {
      alert("Ch·ª©c nƒÉng Tip ch·ªâ ho·∫°t ƒë·ªông trong Pi Browser.");
      return;
    }
    const paymentData = {
      amount: 0.1,
      memo: `Tip cho tin nh·∫Øn c·ªßa ${messageToTip.author} tr√™n PiConnect!`,
      metadata: { messageId: messageToTip.id || messageToTip.timestamp }, 
    };
    const callbacks = {
      onReadyForServerApproval: (paymentId) => {
        alert(`S·∫µn s√†ng g·ª≠i 0.1 Pi. ·ªû phi√™n b·∫£n n√¢ng cao, backend s·∫Ω x√°c th·ª±c paymentId: ${paymentId}`);
      },
      onReadyForServerCompletion: (paymentId, txid) => {
        alert(`ƒê√£ tip th√†nh c√¥ng 0.1 Pi! M√£ giao d·ªãch (txid): ${txid}`);
      },
      onCancel: (paymentId) => {
        alert("B·∫°n ƒë√£ h·ªßy giao d·ªãch tip.");
      },
      onError: (error, payment) => {
        alert("ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh tip.");
      },
    };
    try {
      await window.Pi.createPayment(paymentData, callbacks);
    } catch (err) {
      console.error('L·ªói khi g·ªçi createPayment:', err);
    }
  };

  const sendMessage = (e) => {
    e.preventDefault();
    if (message.trim() && user && socket) { 
      const messageData = {
        author: user.username, 
        content: message,
        timestamp: Date.now() // Th√™m timestamp ƒë·ªÉ c√≥ ID tin nh·∫Øn
      };
      socket.emit('sendMessage', messageData);
      setChatHistory((prev) => [...prev, { ...messageData, type: 'sent' }]);
      setMessage('');
    }
  };

  // --- GIAO DI·ªÜN ---
  return (
    <div className="App">
      {!user ? (
        <div className="login-container">
          <h2>Ch√†o m·ª´ng ƒë·∫øn PiConnect</h2>
          <p>M·∫°ng x√£ h·ªôi nh·∫Øn tin d√†nh ri√™ng cho Pioneers</p>
          <button className="login-button" onClick={handleAuthenticate}>
            ƒêƒÉng nh·∫≠p v·ªõi Pi
          </button>
          <div className="login-footer">
            <Link to="/terms">ƒêi·ªÅu kho·∫£n D·ªãch v·ª•</Link> | <Link to="/privacy">Ch√≠nh s√°ch Quy·ªÅn ri√™ng t∆∞</Link>
          </div>
        </div>
      ) : (
        <div className="chat-container">
          <h2>
            PiConnect Messenger 
            <span className="welcome-user">(Ch√†o, {user.username}!)</span>
            <button className="logout-button" onClick={handleLogout}>ƒêƒÉng xu·∫•t</button>
          </h2>
          <div className="chat-window">
            {chatHistory.map((msg, index) => (
              <div key={index} className={`message-container ${msg.type}`}>
                <div className={`message ${msg.type}`}>
                  <div className="message-content">
                    {msg.type === 'received' && <p className="message-author">{msg.author}</p>}
                    <p>{msg.content}</p>
                  </div>
                  {msg.type === 'received' && (
                    <button className="tip-button" onClick={() => handleTip(msg)}>
                      üí∏ Tip 0.1 œÄ
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
          <form className="message-form" onSubmit={sendMessage}>
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
            />
            <button type="submit">G·ª≠i</button>
          </form>
        </div>
      )}
    </div>
  );
}


// --- COMPONENT APP CH√çNH ƒê·ªÇ X·ª¨ L√ù ROUTING ---
// Ch√∫ng ta s·∫Ω gi·ªØ App.js c≈© c√≥ t√™n l√† ChatPage v√† App m·ªõi s·∫Ω qu·∫£n l√Ω c√°c trang
import PrivacyPolicy from './components/PrivacyPolicy';
import TermsOfService from './components/TermsOfService';

function App() {
  return (
    <Routes>
      <Route path="/" element={<ChatPage />} />
      <Route path="/privacy" element={<PrivacyPolicy />} />
      <Route path="/terms" element={<TermsOfService />} />
    </Routes>
  );
}

export default App;